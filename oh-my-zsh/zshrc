# ==========================================
#  zshrc — WhoAmI (Fedora 42, Zsh + OMZ)
#  • Path & env (Cargo, Go, Krew, Pyenv, NVM)
#  • Oh-My-Zsh + plugins + custom theme
#  • History, fzf, kubectl, zoxide, direnv
#  • Aliases for ls/eza, bat, OpenStack
#  • Keybindings (navigation, words, delete)
# ==========================================

# --- PATH & ENV ---
export PATH="$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH"

if [ -f "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
elif [ -d "$HOME/.cargo/bin" ]; then
  export PATH="$HOME/.cargo/bin:$PATH"
fi
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export GOPATH="$HOME/.go"
export PATH="$GOPATH/bin:$PATH"

export SHELL="/usr/bin/zsh"
export ZSH="$HOME/.oh-my-zsh"
export EDITOR="nvim"
export VISUAL="$EDITOR"

# --- Oh-My-Zsh ---
if [ -n "$ZDOTDIR" ]; then
  ZCACHEDIR="$ZDOTDIR/.zcompcache"
else
  ZCACHEDIR="$HOME/.zcompcache"
fi
mkdir -p "$ZCACHEDIR"
export ZSH_COMPDUMP="$ZCACHEDIR/.zcompdump"

ZSH_THEME="whoami-fino-time"
CASE_SENSITIVE="false"
DISABLE_MAGIC_FUNCTIONS="true"
ENABLE_CORRECTION="false"
DISABLE_UNTRACKED_FILES_DIRTY="true"

zstyle ':omz:update' mode auto
zstyle ':omz:update' frequency 7

plugins=(
  git
  git-prompt
  zsh-autosuggestions
  fast-syntax-highlighting
  zsh-interactive-cd
  dnf
  fzf
  vscode
  pyenv
  azure-cli
  rust
)
source "$ZSH/oh-my-zsh.sh"

# --- Pyenv ---
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
export VIRTUAL_ENV_DISABLE_PROMPT=1
eval "$(pyenv init --path)" >/dev/null 2>&1
eval "$(pyenv init -)" >/dev/null 2>&1
# eval "$(pyenv virtualenv-init -)" >/dev/null 2>&1

# --- History & Options ---
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=200000
export SAVEHIST=200000

setopt AUTO_CD AUTO_PUSHD PUSHD_IGNORE_DUPS
setopt EXTENDED_GLOB
setopt HIST_IGNORE_DUPS HIST_IGNORE_SPACE HIST_VERIFY
setopt SHARE_HISTORY INC_APPEND_HISTORY
setopt INTERACTIVE_COMMENTS
export WORDCHARS='*?[]~=&;!#$%^(){}<>'

# --- fzf ---
if command -v fd >/dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND='fd --hidden --follow --exclude .git'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
elif command -v rg >/dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
fi
if command -v fzf >/dev/null 2>&1; then
  export FZF_CTRL_R_OPTS='--preview "echo {}" --preview-window=down:3:hidden:wrap --bind=?:toggle-preview'
fi

# --- Kubernetes ---
alias kubectl='kubecolor'
alias k='kubectl'
alias kubectx='kubie ctx'
alias kubens='kubie ns'
if command -v kubectl >/dev/null 2>&1; then
  source <(kubectl completion zsh)
  compdef kubecolor=kubectl
fi

# --- Aliases ---
alias s='ssh'
alias op='openstack'
alias yz='yazi'
alias logir='sudo systemctl restart logid.service'

alias openv='pyenv activate openstack && export OS_CLOUD=$({ yq e ".clouds | keys | sort | .[]" ~/.config/openstack/clouds.yaml | { [ -n "$OS_CLOUD" ] && echo "$OS_CLOUD"; [ -n "$OS_CLOUD" ] && grep -v "^$OS_CLOUD$" || cat; }; } | fzf)'
alias opexit='pyenv deactivate openstack && unset OS_CLOUD'

if command -v eza >/dev/null 2>&1; then
  alias ls='eza --group-directories-first --icons'
  alias ll='eza -l --git --group-directories-first --icons'
  alias la='eza -la --git --group-directories-first --icons'
fi
if command -v bat >/dev/null 2>&1; then
  export PAGER="bat"
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# --- Zoxide ---
if command -v zoxide >/dev/null 2>&1; then
  eval "$(zoxide init zsh)"
  alias z="zoxide query -i"
  alias zi='zoxide query -i | tr -d "\n" | xargs -r -I{} $SHELL -lc "cd {} && exec zsh"'
  alias za='zoxide query -l | fzf | xargs -r -I{} $SHELL -lc "cd {} && exec zsh"'
fi

# --- Direnv ---
if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi

# --- Bash completions ---
autoload -U +X bashcompinit && bashcompinit
command -v vault >/dev/null 2>&1 && complete -o nospace -C /usr/bin/vault vault
command -v terraform >/dev/null 2>&1 && complete -o nospace -C /usr/bin/terraform terraform
command -v aws_completer >/dev/null 2>&1 && complete -C '/usr/local/bin/aws_completer' aws
command -v tofu >/dev/null 2>&1 && complete -o nospace -C /usr/bin/tofu tofu

# --- NVM ---
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"

# --- Fastfetch ---
if [ -t 1 ] && [ -z "$TMUX" ] && command -v fastfetch >/dev/null 2>&1; then
  fastfetch -c "$HOME/.fastfetch/presets/examples/12.jsonc"
fi

# --- Keybindings ---
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
bindkey '^[b' backward-word
bindkey '^[f' forward-word
bindkey '^[[1;3D' backward-word
bindkey '^[[1;3C' forward-word
bindkey '^W' backward-kill-word
bindkey '^H' backward-kill-word
bindkey '^[^?' backward-kill-word
bindkey '^[[3;5~' kill-word
bindkey '^[d' kill-word
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line

